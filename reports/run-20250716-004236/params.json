{
  "__name__": "__main__",
  "__doc__": "Automatically created module for IPython interactive environment",
  "_ih": [
    "",
    "# new version that tests report creation",
    "import os\nimport sys\nimport base64\nimport requests\nimport json\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom fpdf import FPDF\nfrom google.cloud import secretmanager\n\n# === SETUP ===\nprint(\"Starting notebook execution...\", file=sys.stderr)\nTARGET_REPO = \"AbhinavSivanandhan/reports\"\ntimestamp = datetime.now().strftime('%Y%m%d-%H%M%S')\nrun_folder = f\"reports/run-{timestamp}\"\nlocal_output_dir = os.path.join(\"output\", timestamp)\nos.makedirs(local_output_dir, exist_ok=True)\n\n# === PARAMETER CAPTURE (FILTERED) ===\nraw_locals = locals()\nparameters_used = {\n    k: v for k, v in raw_locals.items()\n    if isinstance(v, (str, int, float, bool, list, dict))\n}\n\nparam_log_path = os.path.join(local_output_dir, \"params.json\")\ntry:\n    with open(param_log_path, \"w\") as f:\n        json.dump(parameters_used, f, indent=2)\n    print(\"Saved parameter log:\", param_log_path)\nexcept Exception as e:\n    print(f\"[ERROR] Failed to write parameter log: {e}\", file=sys.stderr)\n\n# === AUTHENTICATION ===\ndef get_github_token():\n    try:\n        client = secretmanager.SecretManagerServiceClient()\n        name = f\"projects/{os.environ.get('GOOGLE_CLOUD_PROJECT')}/secrets/github-token/versions/latest\"\n        response = client.access_secret_version(request={\"name\": name})\n        token = response.payload.data.decode(\"UTF-8\")\n        print(\"GitHub token retrieved.\", file=sys.stderr)\n        return token\n    except Exception as e:\n        print(f\"Error getting GitHub token: {e}\", file=sys.stderr)\n        return None\n\nGITHUB_TOKEN = get_github_token()\n\n# === FILE GENERATION ===\n\n# 1. Plot (PNG)\nplt.plot([1, 2, 3], [1, 4, 9])\nplt.title(\"Test Plot\")\nplot_path = os.path.join(local_output_dir, \"test-plot.png\")\nplt.savefig(plot_path)\nprint(\"Saved PNG:\", plot_path)\n\n# 2. HTML\nhtml_path = os.path.join(local_output_dir, \"test.html\")\nwith open(html_path, \"w\") as f:\n    f.write(\"<h1>This is a test HTML output</h1>\")\nprint(\"Saved HTML:\", html_path)\n\n# 3. CSV (manual)\ncsv_path = os.path.join(local_output_dir, \"test.csv\")\nwith open(csv_path, \"w\") as f:\n    f.write(\"a,b,c\\n1,2,3\\n4,5,6\")\nprint(\"Saved CSV:\", csv_path)\n\n# 4. DataFrame CSV\ndf = pd.DataFrame({\n    \"A\": [1, 2, 3],\n    \"B\": [\"x\", \"y\", \"z\"]\n})\ndf_csv_path = os.path.join(local_output_dir, \"test-data.csv\")\ndf.to_csv(df_csv_path, index=False)\nprint(\"Saved DataFrame CSV:\", df_csv_path)\n\n# 5. PDF\npdf = FPDF()\npdf.add_page()\npdf.set_font(\"Arial\", size=12)\npdf.cell(200, 10, txt=\"Hello, this is a test PDF report.\", ln=True)\npdf_path = os.path.join(local_output_dir, \"test-report.pdf\")\npdf.output(pdf_path)\nprint(\"Saved PDF:\", pdf_path)\n\n# === GITHUB UPLOAD HELPERS ===\n\ndef upload_file_to_github(local_path, remote_path, repo, token, branch='main'):\n    with open(local_path, \"rb\") as f:\n        content_encoded = base64.b64encode(f.read()).decode('utf-8')\n    url = f\"https://api.github.com/repos/{repo}/contents/{remote_path}\"\n    headers = {\n        'Authorization': f'token {token}',\n        'Accept': 'application/vnd.github.v3+json'\n    }\n    data = {\n        'message': f\"Add {remote_path}\",\n        'content': content_encoded,\n        'branch': branch\n    }\n    resp = requests.put(url, headers=headers, json=data)\n    print(f\"Uploaded {remote_path}: {resp.status_code} - {resp.reason}\", file=sys.stderr)\n    return resp.status_code == 201\n\n# === UPLOAD FILES ===\n\nif GITHUB_TOKEN:\n    print(\"=== GITHUB UPLOAD STAGE STARTED ===\", file=sys.stderr)\n    for filename in os.listdir(local_output_dir):\n        local_path = os.path.join(local_output_dir, filename)\n        remote_path = f\"{run_folder}/{filename}\"\n        upload_file_to_github(local_path, remote_path, TARGET_REPO, GITHUB_TOKEN)\nelse:\n    print(\"No GitHub token available - skipping upload\", file=sys.stderr)\n\n# === BASIC MARKDOWN LOG ===\n\ndef upload_simple_report(repo, token, branch='main', commit_message='Report from notebook execution'):\n    report_md = f\"\"\"\n# Execution Report\n\nGenerated: {datetime.now().isoformat()}\nEnvironment: Google Cloud Run\nProject: {os.environ.get('GOOGLE_CLOUD_PROJECT', 'unknown')}\nStatus: Success\n\n## Parameters Used\n\"\"\"\n    for key, value in parameters_used.items():\n        report_md += f\"- **{key}**: `{value}`\\n\"\n    report_md += \"\\n---\\n\"\n\n    file_path = f\"reports/execution-{timestamp}.md\"\n    content_encoded = base64.b64encode(report_md.encode('utf-8')).decode('utf-8')\n    url = f'https://api.github.com/repos/{repo}/contents/{file_path}'\n    headers = {\n        'Authorization': f'token {token}',\n        'Accept': 'application/vnd.github.v3+json'\n    }\n    data = {\n        'message': commit_message,\n        'content': content_encoded,\n        'branch': branch\n    }\n    resp = requests.put(url, headers=headers, json=data)\n    if resp.status_code == 201:\n        print(\"Simple .md report uploaded successfully\", file=sys.stderr)\n    else:\n        print(f\"Failed to upload .md report: {resp.status_code} - {resp.text}\", file=sys.stderr)\n\nif GITHUB_TOKEN:\n    upload_simple_report(TARGET_REPO, GITHUB_TOKEN)\nelse:\n    print(\"No token for .md report upload\", file=sys.stderr)\n\nprint(\"=== NOTEBOOK COMPLETED ===\", file=sys.stderr)"
  ],
  "_oh": {},
  "_dh": [
    